 1. Which parts of the code you provided would need to be adapted to run the same
tests in an Android phone, using the same browser, in the tool you chose?

A. Initialize android driver
B.Add desired capabilities  and also add browser as capability 
capabilities.setCapability("browserName", "Chrome");
C. You have to adapt the below code to run the WEB UI tests in Android.The example is of Appium

    
		//Initialize Browser 
		setupDriver(browserName);
		// Maximize Window
		driver.manage().window().maximize();
		//delete cookies
		driver.manage().deleteAllCookies();
		// Get Url 
		driver.get(Constants.url);
		//Set Implicit wait for 20 sec
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

2. How could we run these tests in a physical android phone connected to your laptop?
Does the laptop need any extra software/hardware to run them properly?

200 MB to 1 GB of free space  in Laptop

there are 2 ways :
1st Way 

  1.Download team viewer Quick support 
  2.AirDroid 4 :Remote access & File  to mirror android device
 
 
 2nd way 
 
Step 1 : Download SDK tools
 https://developer.android.com/studio
----------------------------------------------------------------------------------
Step 2 : Unzip folder & Extract platform tools
----------------------------------------------------------------------------------
Step 3 : Set environment variables
 ANDROID_HOME = location of sdk folder
 Path : append path of platform_tools folder
----------------------------------------------------------------------------------
Step 4 : Check command adb devices on command line --sdkmanager platform-tools platforms android-29
----------------------------------------------------------------------------------
Step 5 : Make device ready
 - enable developer mode
 - make USB Debugging on
----------------------------------------------------------------------------------
Step 6 : Connect device to computer system thorugh USB cable
 - if asked enable USB Debbugging
----------------------------------------------------------------------------------
Step 7 : Run command adb devices
  adb = android debug bridge
 Check your device id displayed

3. What would be the main changes if the website was now part of a hybrid android
app?

Appium comes with built-in hybrid support via Chromedriver

It is necessary to set true the setWebContentsDebuggingEnabled property on the android.webkit.WebView element.

add capabilities and initialize android driver

SET CONTEXT TO WEB_VIEW

Set<String> contextNames = driver.getContextHandles();
for (String contextName : contextNames) {
    System.out.println(contextName); //print all the context
}
driver.context(contextNames.toArray()[id of web view]);

4. And if it was a native app?

a. Add appPackage and Appactivity in desired capabilitiesk
b.capabilities.setCapability(“autoGrantPermissions”, true);The code below allows the app to grant all the permissions so that no pop up occurs during the testing phase.
c. // assuming we have an initialized `driver` object for an app
driver
.contexts().then(function (contexts) { // get list of available views. Returns array: ["NATIVE_APP","WEBVIEW_1"]
return driver.context(contexts[1]); // choose the webview context
})
// do some web testing
.elementsByCss('.green_button').click()

.context('NATIVE_APP') // leave webview context
// do more native stuff here if we want
.quit() // stop WebDriver
